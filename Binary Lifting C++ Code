#include <bits/stdc++.h>
using namespace std;
int n,q;
vector<vector<int>> graph;
const int MAX_LEVEL=10;
const int MAX_SIZE=1<<10;
int parent[MAX_SIZE][MAX_LEVEL];
int depth[MAX_SIZE];
void dfs(int node, int p)
{
	parent[node][0]=p;
	for (auto i:graph[node])
	{
		if (i!=p)
		{
			depth[i]=depth[node]+1;
			dfs(i,node);
		}
	}
}
int lca(int u, int v)
{
	if (depth[u]<depth[v])
	{
		swap(u,v);
	}
	int diff=depth[u]-depth[v];
	for(int i=0; i<MAX_LEVEL; i++) 
	{
        if((1<<i) & diff)
            u = parent[u][i];
    }
    if(u == v)
        return u;
    for(int i=MAX_LEVEL-1; i>=0; i--) 
    {
        if(parent[u][i] != parent[v][i]) {
            u = parent[u][i];
            v = parent[v][i];
        }
    }
    return parent[u][0];
}
int main() 
{
	cin>>n;
	graph.resize(n+1);
	for (int i=1;i<n;i++)
	{
		int x,y;
		cin>>x>>y;
		graph[x].push_back(y);
		graph[y].push_back(x);
	}
	dfs(1,0);
	for (int i=1;i<=MAX_LEVEL;i++) // power of 2 range
	{
		for (int j=1;j<=n;j++)
		{
			if (parent[j][i-1]!=0)
			{
				parent[j][i]=parent[parent[j][i-1]][i-1];
			}
		}
	}
	cin>>q;
	while(q--)
	{
		int x,y;
		cin>>x>>y;
		cout<<"LCA of "<<x<<" and "<<y<<" is : "<<lca(x,y)<<"\n";
	}
	return 0;
}
